{"version":3,"sources":["../../../../../modules/@angular/animation/src/dsl/animation_trigger.ts"],"names":[],"mappings":"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","file":"animation_trigger.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationStyles, Trigger} from '@angular/core';\nimport {StyleData} from '../common/style_data';\nimport {copyStyles, normalizeStyles} from '../common/util';\nimport {AnimationDslVisitor, visitAnimationNode} from './animation_dsl_visitor';\nimport {AnimationAnimateMetadata, AnimationGroupMetadata, AnimationKeyframesSequenceMetadata, AnimationMetadata, AnimationSequenceMetadata, AnimationStateMetadata, AnimationStyleMetadata, AnimationTransitionMetadata} from './animation_metadata';\nimport {parseTransitionExpr} from './animation_transition_expr';\nimport {AnimationTransitionFactory} from './animation_transition_factory';\nimport {AnimationTransitionInstruction} from './animation_transition_instruction';\nimport {validateAnimationSequence} from './animation_validator_visitor';\n/**\n * `trigger` is an animation-specific function that is designed to be used inside of Angular2's\n * animation DSL language. If this information is new, please navigate to the {\\@link\n * Component#animations-anchor component animations metadata page} to gain a better understanding of\n * how animations in Angular2 are used.\n * \n * `trigger` Creates an animation trigger which will a list of {\\@link state state} and {\\@link\n * transition transition} entries that will be evaluated when the expression bound to the trigger\n * changes.\n * \n * Triggers are registered within the component annotation data under the {\\@link\n * Component#animations-anchor animations section}. An animation trigger can be placed on an element\n * within a template by referencing the name of the trigger followed by the expression value that the\n * trigger is bound to (in the form of `[\\@triggerName]=\"expression\"`.\n * \n * ### Usage\n * \n * `trigger` will create an animation trigger reference based on the provided `name` value. The\n * provided `animation` value is expected to be an array consisting of {\\@link state state} and {\\@link\n * transition transition} declarations.\n * \n * ```typescript\n * \\@Component({ \n *   selector: 'my-component',\n *   templateUrl: 'my-component-tpl.html',\n *   animations: [\n *     trigger(\"myAnimationTrigger\", [\n *       state(...),\n *       state(...),\n *       transition(...),\n *       transition(...)\n *     ])\n *   ]\n * })\n * class MyComponent {\n *   myStatusExp = \"something\";\n * }\n * ```\n * \n * The template associated with this component will make use of the `myAnimationTrigger` animation\n * trigger by binding to an element within its template code.\n * \n * ```html\n * <!-- somewhere inside of my-component-tpl.html -->\n * <div [\\@myAnimationTrigger]=\"myStatusExp\">...</div>\n * ```\n * \n * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n * \n * \\@experimental Animation support is experimental.\n * @param {?} name\n * @param {?} definitions\n * @return {?}\n */\nexport function trigger(name: string, definitions: AnimationMetadata[]): AnimationTrigger {\n  return new AnimationTriggerVisitor().buildTrigger(name, definitions);\n}\n/**\n * \\@experimental Animation support is experimental.\n */\nexport class AnimationTrigger implements Trigger {\npublic transitionFactories: AnimationTransitionFactory[] = [];\npublic states: {[stateName: string]: StyleData} = {};\n/**\n * @param {?} name\n * @param {?} states\n * @param {?} _transitionAsts\n */\nconstructor(\npublic name: string, states: {[stateName: string]: StyleData},\nprivate _transitionAsts: AnimationTransitionMetadata[]) {\n    Object.keys(states).forEach(\n        stateName => { this.states[stateName] = copyStyles(states[stateName], false); });\n\n    const errors: string[] = [];\n    _transitionAsts.forEach(ast => {\n      const exprs = parseTransitionExpr(ast.expr, errors);\n      const sequenceErrors = validateAnimationSequence(ast);\n      if (sequenceErrors.length) {\n        errors.push(...sequenceErrors);\n      } else {\n        this.transitionFactories.push(\n            new AnimationTransitionFactory(this.name, ast, exprs, states));\n      }\n    });\n\n    if (errors.length) {\n      const LINE_START = '\\n - ';\n      throw new Error(\n          `Animation parsing for the ${name} trigger have failed:${LINE_START}${errors.join(LINE_START)}`);\n    }\n  }\n/**\n * @param {?} currentState\n * @param {?} nextState\n * @return {?}\n */\nmatchTransition(currentState: any, nextState: any): AnimationTransitionInstruction {\n    for (let /** @type {?} */ i = 0; i < this.transitionFactories.length; i++) {\n      let /** @type {?} */ result = this.transitionFactories[i].match(currentState, nextState);\n      if (result) return result;\n    }\n    return null;\n  }\n}\n\nfunction AnimationTrigger_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimationTrigger.prototype.transitionFactories;\n/** @type {?} */\nAnimationTrigger.prototype.states;\n/** @type {?} */\nAnimationTrigger.prototype.name;\n/** @type {?} */\nAnimationTrigger.prototype._transitionAsts;\n}\n\nclass AnimationTriggerContext {\npublic errors: string[] = [];\npublic states: {[stateName: string]: StyleData} = {};\npublic transitions: AnimationTransitionMetadata[] = [];\n}\n\nfunction AnimationTriggerContext_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimationTriggerContext.prototype.errors;\n/** @type {?} */\nAnimationTriggerContext.prototype.states;\n/** @type {?} */\nAnimationTriggerContext.prototype.transitions;\n}\n\nclass AnimationTriggerVisitor implements AnimationDslVisitor {\n/**\n * @param {?} name\n * @param {?} definitions\n * @return {?}\n */\nbuildTrigger(name: string, definitions: AnimationMetadata[]): AnimationTrigger {\n    const /** @type {?} */ context = new AnimationTriggerContext();\n    definitions.forEach(def => visitAnimationNode(this, def, context));\n    return new AnimationTrigger(name, context.states, context.transitions);\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitState(ast: AnimationStateMetadata, context: any): any {\n    context.states[ast.name] = normalizeStyles(new AnimationStyles(ast.styles.styles));\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitTransition(ast: AnimationTransitionMetadata, context: any): any {\n    context.transitions.push(ast);\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitSequence(ast: AnimationSequenceMetadata, context: any) {}\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitGroup(ast: AnimationGroupMetadata, context: any) {}\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitAnimate(ast: AnimationAnimateMetadata, context: any) {}\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitStyle(ast: AnimationStyleMetadata, context: any) {}\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitKeyframeSequence(ast: AnimationKeyframesSequenceMetadata, context: any) {}\n}\n"]}