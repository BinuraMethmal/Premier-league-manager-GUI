{"version":3,"sources":["../../../../../modules/@angular/animation/src/dsl/animation.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AACH,OAAO,EAAkB,eAAA,EAA0B,MAAA,eAAA,CAAA;AAEnD,OAAO,EAAA,eAAE,EAAe,MAAA,gBAAA,CAAA;AACxB,OAAO,EAAA,eAAE,EAAe,MAAA,4BAAA,CAAA;AACxB,OAAO,EAAA,4BAAE,EAA4B,MAAA,2CAAA,CAAA;AACrC,OAAO,EAAoB,QAAA,EAAS,MAAA,sBAAA,CAAA;AAEpC,OAAO,EAAA,uBAAE,EAAuB,MAAA,8BAAA,CAAA;AAChC,OAAO,EAAA,yBAAE,EAAyB,MAAA,+BAAA,CAAA;AAClC,OAAO,EAAA,wBAAE,EAAwB,MAAA,kDAAA,CAAA;AACjC;;GAEG;AACH;IAEA;;OAEG;IACH,mBAFG,KAAsD;QAGrD,IAAM,GAAG,GACL,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,QAAQ,CAAsB,KAAK,CAAC,GAAsB,KAAK,CAAC;QAC3F,IAAM,MAAM,GAAG,yBAAyB,CAAC,GAAG,CAAC,CAAC;QAC9C,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;YAClB,IAAM,YAAY,GAAG,mCAAiC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAG,CAAC;YAC1E,MAAM,IAAI,KAAK,CAAC,YAAY,CAAC,CAAC;QAChC,CAAC;QACD,IAAI,CAAC,aAAa,GAAG,GAAG,CAAC;IAC3B,CAAC;IACH;;;;OAIG;IACH,kCANG,GAMH,UANG,cAAA,EAAA,iBAAA;QAQC,IAAM,gBAAgB,CANhB,KAAA,GAAQ,KAAA,CAAM,OAAC,CAAO,cAAC,CAAc;YAOvC,eAAe,CANC,IAAI,eAAA,CAAgB,gBAAA,CAAA,CAAa,cAAC,CAAA,CAAc,CAAC,GAAC,CACvD,cAAC,CAAA,CAAc;QAO9B,IAAM,gBAAgB,CANhB,IAAA,GAAO,KAAA,CAAM,OAAC,CAAO,iBAAC,CAAiB;YAOzC,eAAe,CANC,IAAI,eAAA,CAAgB,gBAAA,CAAA,CAAa,iBAAC,CAAA,CAAiB,CAAC,GAAC,CAC1D,iBAAC,CAAA,CAAiB;QAOjC,MAAM,CANC,uBAAA,CAAwB,IAAC,CAAI,aAAC,EAAc,KAAA,EAAO,IAAA,CAAK,CAAC;IAOlE,CAAC;IACH;;;;;;OAMG;IAVA,0BAAA,GAWH,UACM,QAAkB,EAAE,OAAY,EAAE,cAA8B,EAChE,iBAAiC;QADC,+BAAA,EAAA,mBAA8B;QAChE,kCAAA,EAAA,sBAAiC;QACnC,IAAM,gBAAgB,CAXhB,YAAA,GAAe,IAAA,CAAK,cAAC,CAAc,cAAC,EAAe,iBAAA,CAAkB,CAAC;QAa5E,qFAAqF;QACrF,+EAA+E;QAC/E,IAAM,gBAAgB,CAXhB,MAAA,GAA0B,QAAA,CAAS,GAAC,CAAG,eAAC,CAAe,CAAC;QAY9D,IAAM,gBAAgB,CAXhB,UAAA,GAAuC,QAAA,CAAS,GAAC,CAAG,wBAAC,CAAwB,CAAC;QAYpF,IAAM,gBAAgB,CAXhB,MAAA,GAAS,IAAI,4BAAA,CAA6B,MAAC,EAAO,UAAA,CAAW,CAAC;QAYpE,MAAM,CAXC,MAAA,CAAO,OAAC,CAAO,OAAC,EAAQ,YAAA,CAAa,CAAC;IAY/C,CAAC;IACH,gBAAC;AAAD,CAjDA,AAiDC,IAAA;;AAED;IACA,gBAAgB;IAChB,SAAS,CAAC,SAAS,CAAC,aAAa,CAAC;AAClC,CAAC","file":"animation.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationPlayer, AnimationStyles, Injector} from '@angular/core';\nimport {StyleData} from '../common/style_data';\nimport {normalizeStyles} from '../common/util';\nimport {AnimationDriver} from '../engine/animation_driver';\nimport {DomAnimationTransitionEngine} from '../engine/dom_animation_transition_engine';\nimport {AnimationMetadata, sequence} from './animation_metadata';\nimport {AnimationTimelineInstruction} from './animation_timeline_instruction';\nimport {buildAnimationKeyframes} from './animation_timeline_visitor';\nimport {validateAnimationSequence} from './animation_validator_visitor';\nimport {AnimationStyleNormalizer} from './style_normalization/animation_style_normalizer';\n/**\n * \\@experimental Animation support is experimental.\n */\nexport class Animation {\nprivate _animationAst: AnimationMetadata;\n/**\n * @param {?} input\n */\nconstructor(input: AnimationMetadata|AnimationMetadata[]) {\n    const ast =\n        Array.isArray(input) ? sequence(<AnimationMetadata[]>input) : <AnimationMetadata>input;\n    const errors = validateAnimationSequence(ast);\n    if (errors.length) {\n      const errorMessage = `animation validation failed:\\n${errors.join(\"\\n\")}`;\n      throw new Error(errorMessage);\n    }\n    this._animationAst = ast;\n  }\n/**\n * @param {?} startingStyles\n * @param {?} destinationStyles\n * @return {?}\n */\nbuildTimelines(startingStyles: StyleData|StyleData[], destinationStyles: StyleData|StyleData[]):\n      AnimationTimelineInstruction[] {\n    const /** @type {?} */ start = Array.isArray(startingStyles) ?\n        normalizeStyles(new AnimationStyles( /** @type {?} */((<StyleData[]>startingStyles)))) : /** @type {?} */((\n        <StyleData>startingStyles));\n    const /** @type {?} */ dest = Array.isArray(destinationStyles) ?\n        normalizeStyles(new AnimationStyles( /** @type {?} */((<StyleData[]>destinationStyles)))) : /** @type {?} */((\n        <StyleData>destinationStyles));\n    return buildAnimationKeyframes(this._animationAst, start, dest);\n  }\n/**\n * @param {?} injector\n * @param {?} element\n * @param {?=} startingStyles\n * @param {?=} destinationStyles\n * @return {?}\n */\nprivate create(\n      injector: Injector, element: any, startingStyles: StyleData = {},\n      destinationStyles: StyleData = {}): AnimationPlayer {\n    const /** @type {?} */ instructions = this.buildTimelines(startingStyles, destinationStyles);\n\n    // note the code below is only here to make the tests happy (once the new renderer is\n    // within core then the code below will interact with Renderer.transition(...))\n    const /** @type {?} */ driver: AnimationDriver = injector.get(AnimationDriver);\n    const /** @type {?} */ normalizer: AnimationStyleNormalizer = injector.get(AnimationStyleNormalizer);\n    const /** @type {?} */ engine = new DomAnimationTransitionEngine(driver, normalizer);\n    return engine.process(element, instructions);\n  }\n}\n\nfunction Animation_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimation.prototype._animationAst;\n}\n\n"]}